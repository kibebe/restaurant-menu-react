{"version":3,"sources":["Related.js","Option.js","MainMenu.js","RestaurantMenu.js","MenuItems.js","App.js","serviceWorker.js","index.js"],"names":["Related","state","checked","onChange","e","target","setState","value","arr","index","indexOf","splice","list","this","props","related","map","item","name","key","type","includes","Component","Option","expanded","checkboxes","document","getElementsByName","i","length","choices","undefined","className","MainMenu","menu","RestaurantMenu","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26e46463.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Option from \"./Option\";\n\nexport default class Related extends Component {\n  state = {\n    checked: []\n  };\n  onChange = e => {\n    if (e.target.checked) {\n      this.setState({\n        checked: [...this.state.checked, e.target.value]\n      });\n    } else {\n      let arr = [...this.state.checked];\n      let index = arr.indexOf(e.target.value);\n      if (index !== -1) {\n        arr.splice(index, 1);\n        this.setState({\n          checked: arr\n        });\n      }\n    }\n  };\n  render() {\n    const { related } = this.props;\n    const list = related.map((item, index) => {\n      const { name } = item;\n      return (\n        <li key={index}>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"menu2\"\n              onChange={this.onChange}\n              value={name}\n            />\n            {name}\n          </label>\n          {this.state.checked.includes(name) ? <Option item={item} /> : null}\n        </li>\n      );\n    });\n    return <ul>{list}</ul>;\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport Related from \"./Related\";\n\nexport default class Option extends Component {\n  state = {\n    expanded: false\n  };\n\n  onChange = e => {\n    let checkboxes = document.getElementsByName(e.target.name);\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (checkboxes[i].checked) {\n        this.setState({\n          expanded: true\n        });\n        return null;\n      }\n    }\n    this.setState({\n      expanded: false\n    });\n  };\n\n  render() {\n    const { choices, related } = this.props.item;\n    const list = choices.map((item, index) => {\n      return (\n        <li key={index}>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"menu2\"\n              onChange={this.onChange}\n              value={item.name}\n            />\n            {item.name}\n          </label>\n        </li>\n      );\n    });\n    if (related === undefined) return <ul>{list}</ul>;\n    if (this.state.expanded) {\n      return (\n        <Fragment>\n          <ul>{list}</ul>\n          {related.length === 0 ? (\n            \"\"\n          ) : (\n            <h6 className=\"related\">You might also want</h6>\n          )}\n          <Related related={related} />\n        </Fragment>\n      );\n    } else {\n      return <ul>{list}</ul>;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport Option from \"./Option\";\n\nexport default class MainMenu extends Component {\n  state = {\n    checked: []\n  };\n  onChange = e => {\n    if (e.target.checked) {\n      this.setState({\n        checked: [...this.state.checked, e.target.value]\n      });\n    } else {\n      let arr = [...this.state.checked];\n      let index = arr.indexOf(e.target.value);\n      if (index !== -1) {\n        arr.splice(index, 1);\n        this.setState({\n          checked: arr\n        });\n      }\n    }\n  };\n  render() {\n    const { menu } = this.props;\n    const list = menu.map((item, index) => {\n      const { name } = item;\n      return (\n        <li key={index}>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"menu1\"\n              onChange={this.onChange}\n              value={name}\n            />\n            {name}\n          </label>\n          {this.state.checked.includes(name) ? <Option item={item} /> : null}\n        </li>\n      );\n    });\n    return <ul>{list}</ul>;\n  }\n}\n","import React, { Component } from \"react\";\nimport MainMenu from \"./MainMenu\";\n\nexport default class RestaurantMenu extends Component {\n  render() {\n    const { menu } = this.props;\n    return <MainMenu menu={menu} />;\n  }\n}\n","export const menu = [\n  {\n    name: \"Salad\",\n    choices: [\n      {\n        name: \"Santa Fe\"\n      },\n      {\n        name: \"Greek\"\n      },\n      {\n        name: \"Asian\"\n      }\n    ],\n    related: [\n      {\n        name: \"Dressing\",\n        choices: [\n          {\n            name: \"Italian\"\n          },\n          {\n            name: \"Blue Cheese\"\n          },\n          {\n            name: \"Ranch\"\n          }\n        ]\n      },\n      {\n        name: \"Bread\",\n        choices: [\n          {\n            name: \"Italian\"\n          },\n          {\n            name: \"Fiat\"\n          },\n          {\n            name: \"Sourdough\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    name: \"Entree\",\n    choices: [\n      {\n        name: \"Steak\"\n      },\n      {\n        name: \"Salmon\"\n      },\n      {\n        name: \"Rice\"\n      }\n    ],\n    related: []\n  },\n  {\n    name: \"Soup\",\n    choices: [\n      {\n        name: \"Minestrone\"\n      },\n      {\n        name: \"Hot and sour\"\n      },\n      {\n        name: \"Miso\"\n      }\n    ],\n    related: [\n      {\n        name: \"Bread\",\n        choices: [\n          {\n            name: \"Breadsticks\"\n          }\n        ]\n      }\n    ]\n  }\n];\n","import React, { Component } from \"react\";\nimport RestaurantMenu from \"./RestaurantMenu\";\nimport { menu } from \"./MenuItems\";\n\nclass App extends Component {\n  state = {\n    menu: menu\n  };\n  render() {\n    const menu = this.state.menu;\n    return (\n      <div className=\"container\">\n        <h1>Restaurant Menu</h1>\n        <RestaurantMenu menu={menu} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}